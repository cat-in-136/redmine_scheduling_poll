<%# frozen_string_literal: true %>
<%= f.hidden_field :issue_id %>

<div>
  <p class="contextual">
    <%= link_to_function l(:label_toggle_date_picker_on_scheduling_poll_items), 'scheduling_polls_update_date_picker("toggle")' %>
  </p>

  <table>
  <tbody>
  <% items = f.object.scheduling_poll_items
     items = [items.sorted.select {|v| v.persisted? }, items.select {|v| not v.persisted? }].flatten %>
  <%= f.fields_for :scheduling_poll_items, items do |f_item| %>
    <%= render :partial => "scheduling_poll_item_form", :locals => { :f => f, :f_item => f_item } %>
  <% end %>
  <% add_item_tmpl = capture do %>
    <%= f.fields_for :scheduling_poll_items, SchedulingPollItem.new, :child_index => "CHILD_INDEX" do |f_item| %>
      <%= render :partial => "scheduling_poll_item_form", :locals => { :f => f, :f_item => f_item } %>
    <% end %>
  <% end %>
  </tbody>
  <tfoot>
  <tr>
  <td colspan="3">
    <% if defined? scheduling_icon_with_label %><%# redmine >= 6.0 %>
      <%= link_to_function(scheduling_icon_with_label('add', l(:label_add_scheduling_poll_item)),
                           "scheduling_polls_add_item(\"#{escape_javascript(add_item_tmpl)}\")",
                           :class => 'icon icon-add', :id => 'scheduling_poll_add_item_link') %>
    <% else %>
      <%= link_to_function l(:label_add_scheduling_poll_item), "scheduling_polls_add_item(\"#{escape_javascript(add_item_tmpl)}\")", :class => 'icon icon-add', :id => 'scheduling_poll_add_item_link' %>
    <% end %>
  </td>
  </tr>
  </tfoot>
  </table>
</div>

<div class="actions">
  <%= f.submit l(:label_update_scheduling_poll_items) %>
</div>

<% include_calendar_headers_tags %>
<%= javascript_tag <<EOD
function scheduling_polls_update_date_picker(enable) {
  "use strict";
  if (enable === undefined) {
    enable = ($("form .ui-datepicker-trigger").length > 0)? true : false;
  } else if (enable === "toggle") {
    enable = ($("form .ui-datepicker-trigger").length > 0)? false : true;
  }
  if (enable) {
    $("form .scheduling_poll_item_text:not([disabled]):not([readonly])").datepicker($.extend(datepickerOptions, {
      dateFormat: '#{Setting.plugin_redmine_scheduling_poll["scheduling_poll_item_date_format"]}',
      showOn: 'button', buttonImageOnly: true
    }));
  } else {
    $("form .scheduling_poll_item_text").datepicker("destroy");
  }
}
$(function() { scheduling_polls_update_date_picker(true); });
function scheduling_poll_move_item_position(cmd, index) {
  "use strict";

  var target_row = $('input[type=hidden][name="scheduling_poll[scheduling_poll_items_attributes][' + index + '][position]"]').parents("tr");
  switch (cmd) {
    case -2: target_row.prependTo(target_row.parent()); break;
    case -1: target_row.insertBefore(target_row.prevAll("tr").first()); break;
    case +1: target_row.insertAfter(target_row.nextAll("tr").first()); break;
    case +2: target_row.appendTo(target_row.parent()); break;
  }
  target_row.parent().find('input[type=hidden][name$="[position]"]').each(function (i, v) {
    $(v).val(i);
  });
}
function scheduling_polls_add_item(template) {
  "use strict";

  var child_index = $("#scheduling_poll_add_item_link").parents("form").find(".scheduling_poll_item_text").length;
  $("#scheduling_poll_add_item_link").parents("table").find("tbody").append(template.replace(/CHILD_INDEX/g, child_index));
  scheduling_polls_update_date_picker();
}
EOD
%>
